import { InlineKeyboardMarkup, ReplyKeyboardMarkup } from "node-telegram-bot-api";
import { replyKeyboardButtons } from "../lib/telegram/const/buttons";
import TgBot from "../lib/telegram/tgBot";
import User, { UserRole, UserState } from "../models/user";
import { collections, UserService } from "../services/index";
import { CallbackData, CommandParams, Command, UsernameValidationResult } from "./types";
import RolesHandler from "./roles.handler";
import parseStringCommand from "./command.parser";

export default class CommandsHandler {
    constructor(private bot: TgBot) {} // TODO add UserService as injection

    public async handleCommand(from: User, stringCommand: string) {
        const {command, params} = parseStringCommand(stringCommand)

        switch(command) {
            case Command.start:
                await this.handleStart(from)
                break;

            case Command.admin:
                await this.handleAdmin(from)
                break;

            case Command.requestAccess:
                await this.handleRequestAccess(from)
                break;
                
            case Command.grantAccess:
                await this.handleCommandWithUsernameSearch(
                    Command.grantAccess,
                    from, 
                    params,
                    `–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @username –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É`,
                    `–í–∞–º –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É`
                )
                break;

            case Command.revokeAccess:
                await this.handleCommandWithUsernameSearch(
                    Command.revokeAccess, 
                    from, 
                    params,
                    `–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @username –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É`,
                    `–£ –≤–∞—Å –æ—Ç–æ–∑–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É`
                )
                break;

            case Command.makeAdmin:
                await this.handleCommandWithUsernameSearch(
                    Command.makeAdmin,
                    from, 
                    params,
                    `–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,
                    `–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
                )
                break;

            case Command.removeAdmin:                    
                await this.handleCommandWithUsernameSearch(
                    Command.removeAdmin,
                    from, 
                    params,
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @username –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,
                    `–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã`
                )
                break;

            case Command.addTokens: 
                await this.handleCommandWithUsernameSearch(
                    Command.addTokens,
                    from,
                    params,
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @username –¥–æ–±–∞–≤–ª–µ–Ω–æ tokens —Ç–æ–∫–µ–Ω–æ–≤`,
                    `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ tokens —Ç–æ–∫–µ–Ω–æ–≤`
                );
                break;

            case Command.exitAdminMode:
                await this.handleExitAdminMode(from);
                break;

            case Command.state:
                await this.handleState(from);
                break;

            case Command.chooseNeuro:
                await this.handleChooseNeuro(from)
                break;

            case Command.useGPT:
                await this.handleSetUseGpt(from)
                break;

            case Command.useGemini:
                await this.handleSetUseGemini(from)
                break;

            case Command.endUsingNeuro:
                await this.handleEndUsingNeuro(from)
                break;

            default:
                await this.handleUnknownCommand(from)
        }
    }

    public async handleAdmin(from: User) {
        let replyText: string = "Welcome to the Crypto Tarot!"
        if (from.hasAdminRights()) {
            from.update({ state: UserState.adminMode});
            replyText = 
                "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + 
                "- /grantAccess username - –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @username –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n" +
                "- /revokeAccess username - –æ—Ç–æ–∑–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @username –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n" +
                "- /makeAdmin username - —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n" + 
                "- /revokeAdmin username - –æ—Ç–æ–∑–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @username –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
        } else {
            replyText =  "‚õîÔ∏è  –°–æ—Ä—Ä–∏, –Ω–æ —Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    public async handleRequestAccess(from: User) {
        let replyText: string = "–î–æ—Å—Ç—É–ø —É–∂–µ –µ—Å—Ç—å"
        
        if (from.hasAccessToBot()) {
            await this.bot.sendMessage(Number(from.getTgId()), replyText)
            return;
        }

        // Get all admins from DB
        if (collections.users) {
            const userService = new UserService();
            const adminsData = await userService.findAll({role: UserRole.admin});
            
            const username = from.getData().username;
            const userId = from.getData().tgId;
            const messageForAdmin = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø`;
            const keyboard: InlineKeyboardMarkup = {
                inline_keyboard: [
                    [
                        {text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `${CallbackData.approveAccess}:${userId}`},
                        {text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `${CallbackData.rejectAccess}:${userId}`},
                    ]
                ]
            }
            for (const adminData of adminsData) {
                const admin: User = new User(adminData);
                await this.bot.sendMessage(admin.getTgId(), messageForAdmin, keyboard)
            }

            replyText = "–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            await this.bot.sendMessage(Number(from.getTgId()), replyText)
        } else {
            throw new Error(`‚õîÔ∏è  Cannot creater new user: Users collection is undefined`);
        }
    }

    public async handleExitAdminMode(from: User) {
        let replyText = `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${UserState[from.getState()]}`

        if (from.getState() === UserState.adminMode) {
            await from.update({ state: UserState.start });
            replyText = `–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ` + replyText; 
        }
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    public async handleState(from: User) {
        const state = from.getState()
        const replyText = `–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${UserState[state]}`
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    public async handleStart(from: User) {
        let replyText: string = "Welcome to the Crypto Tarot!"
        
        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
                [
                    replyKeyboardButtons.chooseNeuralNetwork
                ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }
    
        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }
    
    public async handleChooseNeuro(from: User) {
        let replyText: string = "–•–æ—Ä–æ—à–æ. –í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–ª–æ–∂–∏—Ç –∫–∞—Ä—Ç—ã"

        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
            [
                replyKeyboardButtons.useGPT,
                replyKeyboardButtons.useGemini,
            ]
        ]}

        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }

    public async handleSetUseGpt(from: User) {
        from.update({ state: UserState.usingGPT })

        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
            [
                replyKeyboardButtons.endUsingNeuro,
            ]
        ]}

        let replyText: string = "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! GPT —Ä–∞–∑–ª–æ–∂–∏—Ç –∫–∞—Ä—Ç—ã –±–µ–∑ –æ–±–º–∞–Ω–∞ –∏ —Å–º—Å. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ GPT –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç üôåüèª"
        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }

    public async handleSetUseGemini(from: User) {
        // usersState.updateUserState(userId, UserState.usingGemini)

        // const keyboard: ReplyKeyboardMarkup = {
        //     keyboard: [
        //     [
        //         replyKeyboardButtons.endUsingNeuro,
        //     ]
        // ]}

        let replyText: string = `‚ö†Ô∏è –¢–∞—Ä–æ–ª–æ–≥ Gemini –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏—Ö —É—Å–ª—É–≥ ‚ö†Ô∏è`
        await this.bot.sendMessage(Number(from.getTgId()), replyText, /* keyboard */)
    }

    public async handleEndUsingNeuro(from: User) {
        from.update({ state: UserState.start})
        let replyText: string = "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ. –£–±–∏—Ä–∞—é –∫–∞—Ä—Ç—ã üÉèüÉèüÉè"
        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
                [
                    replyKeyboardButtons.chooseNeuralNetwork
                ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }
        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }
    
    public async handleUnknownCommand(from: User) {
        let replyText: string = "–ü—Ä–æ—Å—Ç–∏, —á–µ–ª–æ–≤–µ–∫, –Ω–æ –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ"
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    /**
     * Processes commands that require the user name of another user to be specified:
     *  - /grantAccess
     *  - /revokeAccess
     *  - /makeAdmin
     *  - /removeAdmin
     */
    private async handleCommandWithUsernameSearch(
        command: Command, 
        userFrom: User, 
        params?: CommandParams,
        successFromAnswer?: string,
        successToAnswer?: string,
    ) {
        /**
         * Check if username is not undefined
         */
        if (typeof params?.username === 'undefined') {
            throw new Error('CommandsHandler.handleCommandWithUsernameSearch() get undefined argument `username`')
        }

        const validation = await this.validateCommandWithUsernameSearch(command, params.username)
        
        /**
         * Validate if username exist and unique
         */
        if (!validation.result) {
            await this.bot.sendMessage(Number(userFrom.getTgId()), validation.message);
            return;
        }

        /**
         * Check if userTo entity is not undefined
         */
        if (typeof validation.userTo === 'undefined') {
            throw new Error(`Property userTo is undefined after validation`);
        }

        const userTo = validation.userTo;
        const userToData = userTo.getData();
        const userFromData = userFrom.getData();

        /**
         * Check if command about changing user's role
         */
        if ([
            Command.revokeAccess, 
            Command.grantAccess,
            Command.makeAdmin,
            Command.removeAdmin, 
        ].includes(command)) {
            const updatingResult = await RolesHandler.updateUserRole(userFrom, userTo, command);
            let replyText;

            if (!updatingResult.result) {
                replyText = updatingResult.message;
            } else {
                replyText = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å ${userToData.role}.`
                if (updatingResult.updated) {
                    if (successFromAnswer) {
                        replyText = successFromAnswer.replace('username', userToData.username ?? '');
                    }
                    if (successToAnswer) {
                        await this.bot.sendMessage(userToData.tgId, successToAnswer)
                    }
                }
                await this.bot.sendMessage(userFromData.tgId, replyText)
            }
        }
    }

    /**
     * Validate if provided username is incorrect or not unique
     */
    private async validateCommandWithUsernameSearch(
        command: Command, 
        username: string,
    ): Promise<UsernameValidationResult> {
        /**
         * Check if command is handable by this function
         */
        if (![
            Command.grantAccess, 
            Command.revokeAccess, 
            Command.makeAdmin, 
            Command.removeAdmin
        ].includes(command)) {
            throw new Error(`CommandsHandler.handleCommandWithUsernameSearch() cannot handle command ${command}`)
        }

        /**
         * Check if username is correct
         */
        if (typeof username === 'undefined' || username.length === 0) {
            return {
                result: false,
                message: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —é–∑–µ—Ä–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ '@'."
            }
        }

        const userService = new UserService()
        const usersData = await userService.findByUsername(username);

        /**
         * Check if user for given data is unique
         */
        if (usersData.length === 0) {
            return {
                result: false,
                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø, –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start`
            }

        } else if (usersData.length > 1) {
            const usernames = usersData.map(user => user.username)
            return {
                result: false,
                message: `–ü–æ –¥–∞–Ω–Ω–æ–º—É —é–∑–µ—Ä–Ω–µ–π–º—É –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usernames.join(', ')}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–º`
            }
        }

        return {
            result: true,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω',
            userTo: new User(usersData[0]),
        }
    }
}