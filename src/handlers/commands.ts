import TelegramBot, { ReplyKeyboardMarkup } from "node-telegram-bot-api";

import { replyButtons } from "../lib/telegram/const/buttons";
import TgBot from "../lib/telegram/tgBot";
import User, { UserState } from "../models/user";


export const Commands = {
    start: "/start",
    admin: "/admin",
    state: "/state",
    exitAdminMode: "/exitAdmin",
    chooseNeuro: "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞",
    useGPT: "–†–∞—Å–∫–ª–∞–¥ –æ—Ç GPT",
    useGemini: "–†–∞—Å–∫–ª–∞–¥ –æ—Ç Gemini",
    endUsingNeuro: "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥",
}


export default class CommandsHandler {
    constructor(private bot: TgBot) {}

    public async handleCommand(from: TelegramBot.User, command: string) {
        switch(command) {
            case Commands.start:
                await this.handleStart(from)
                break;

            case Commands.admin:
                await this.handleAdmin(from)
                break;

            case Commands.exitAdminMode:
                await this.handleExitAdminMode(from);
                break;

            case Commands.state:
                await this.handleState(from);
                break;

            case Commands.chooseNeuro:
                await this.handleChooseNeuro(from.id)
                break;

            case Commands.useGPT:
                await this.handleSetUseGpt(from.id)
                break;

            case Commands.useGemini:
                await this.handleSetUseGemini(from.id)
                break;

            case Commands.endUsingNeuro:
                await this.handleEndUsingNeuro(from.id)
                break;

            default:
                await this.handleUnknownCommand(from)
        }
    }

    public async handleAdmin(from: TelegramBot.User) {
        let replyText: string = "Welcome to the Crypto Tarot!"
        const user: User = new User(from.id);
        if (await user.hasAdminRights()) {
            user.updateState(UserState.inAdminMode);
            replyText = "Now you are in Admin Mode";
        } else {
            replyText =  "‚õîÔ∏è  –°–æ—Ä—Ä–∏, –Ω–æ —Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        await this.bot.sendMessage(Number(from.id), replyText)
    }

    public async handleExitAdminMode(from: TelegramBot.User) {
        const user: User = new User(from.id);
        let replyText = `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${UserState[await user.getState()]}`

        if (await user.getState() === UserState.inAdminMode) {
            await user.updateState(UserState.start);
            replyText = `–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ` + replyText; 
        }
        await this.bot.sendMessage(Number(from.id), replyText)
    }

    public async handleState(from: TelegramBot.User) {
        const user: User = new User(from.id);
        const state = await user.getState()
        const replyText = `–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${UserState[state]}`
        await this.bot.sendMessage(Number(from.id), replyText)
    }

    public async handleStart(from: TelegramBot.User) {
        let replyText: string = "Welcome to the Crypto Tarot!"
        
        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
                [
                    replyButtons.chooseNeuralNetwork
                ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }
    
        await this.bot.sendMessage(Number(from.id), replyText, keyboard)
    }
    
    public async handleChooseNeuro(userId: number) {
        let replyText: string = "–•–æ—Ä–æ—à–æ. –í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–ª–æ–∂–∏—Ç –∫–∞—Ä—Ç—ã"

        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
            [
                replyButtons.useGPT,
                replyButtons.useGemini,
            ]
        ]}

        await this.bot.sendMessage(Number(userId), replyText, keyboard)
    }

    public async handleSetUseGpt(userId: number) {
        const user: User = new User(userId)
        user.updateState(UserState.usingGPT)

        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
            [
                replyButtons.endUsingNeuro,
            ]
        ]}

        let replyText: string = "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! GPT —Ä–∞–∑–ª–æ–∂–∏—Ç –∫–∞—Ä—Ç—ã –±–µ–∑ –æ–±–º–∞–Ω–∞ –∏ —Å–º—Å. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ GPT –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç üôåüèª"
        await this.bot.sendMessage(Number(userId), replyText, keyboard)
    }

    public async handleSetUseGemini(userId: number) {
        // usersState.updateUserState(userId, UserState.usingGemini)

        // const keyboard: ReplyKeyboardMarkup = {
        //     keyboard: [
        //     [
        //         replyButtons.endUsingNeuro,
        //     ]
        // ]}

        let replyText: string = `‚ö†Ô∏è –¢–∞—Ä–æ–ª–æ–≥ Gemini –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏—Ö —É—Å–ª—É–≥ ‚ö†Ô∏è`
        await this.bot.sendMessage(Number(userId), replyText, /* keyboard */)
    }

    public async handleEndUsingNeuro(userId: number) {
        const user: User = new User(userId)
        user.updateState(UserState.start)
        let replyText: string = "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ. –£–±–∏—Ä–∞—é –∫–∞—Ä—Ç—ã üÉèüÉèüÉè"
        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
                [
                    replyButtons.chooseNeuralNetwork
                ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }
        await this.bot.sendMessage(Number(userId), replyText, keyboard)
    }
    
    public async handleUnknownCommand(from: TelegramBot.User) {
        let replyText: string = "–ü—Ä–æ—Å—Ç–∏, —á–µ–ª–æ–≤–µ–∫, –Ω–æ –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ"
        await this.bot.sendMessage(Number(from.id), replyText)
    }
}