import { InlineKeyboardMarkup, ReplyKeyboardMarkup } from "node-telegram-bot-api";
import { replyKeyboardButtons } from "../lib/telegram/const/buttons";
import TgBot from "../lib/telegram/tgBot";
import User, { UserRole, UserState } from "../models/user";
import { collections, UserService } from "../services/index";
import { CallbackData } from "./events";


export const Commands = {
    start: "/start",
    user: "/user",
    admin: "/admin",
    requestAccess: "/requestAccess",
    grantAccess: "/grantAccess",
    revokeAccess: "/revokeAccess",
    makeAdmin: "/makeAdmin",
    removeAdmin: "/removeAdmin",
    state: "/state",
    exitAdminMode: "/exitAdmin",
    chooseNeuro: "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞",
    useGPT: "–†–∞—Å–∫–ª–∞–¥ –æ—Ç GPT",
    useGemini: "–†–∞—Å–∫–ª–∞–¥ –æ—Ç Gemini",
    endUsingNeuro: "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥",
}


export default class CommandsHandler {
    constructor(private bot: TgBot) {}

    public async handleCommand(from: User, command: string) {
        const commandAndParams: string[] = command.split(' ');
        const commandWithoutParams: string | undefined = commandAndParams.shift();
        const params = commandAndParams.join(' ');

        console.log(`commandAndParams:`, commandAndParams);
        console.log(`commandWithoutParams:`, commandWithoutParams);
        console.log(`params:`, params);

        switch(commandWithoutParams) {
            case Commands.start:
                await this.handleStart(from)
                break;

            case Commands.admin:
                await this.handleAdmin(from)
                break;

                case Commands.requestAccess:
                    await this.handleRequestAccess(from)
                    break;
                
            case Commands.grantAccess:
                await this.handleGrantAccess(from, params)
                break;

            case Commands.makeAdmin:
                await this.handleMakeAdmin(from, params)
                break;

            case Commands.exitAdminMode:
                await this.handleExitAdminMode(from);
                break;

            case Commands.state:
                await this.handleState(from);
                break;

            case Commands.chooseNeuro:
                await this.handleChooseNeuro(from)
                break;

            case Commands.useGPT:
                await this.handleSetUseGpt(from)
                break;

            case Commands.useGemini:
                await this.handleSetUseGemini(from)
                break;

            case Commands.endUsingNeuro:
                await this.handleEndUsingNeuro(from)
                break;

            default:
                await this.handleUnknownCommand(from)
        }
    }

    public async handleAdmin(from: User) {
        let replyText: string = "Welcome to the Crypto Tarot!"
        if (from.hasAdminRights()) {
            from.update({ state: UserState.adminMode});
            replyText = 
                "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + 
                "/grantAccess username - –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @username –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n" +
                "/revokeAccess username - –æ—Ç–æ–∑–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @username –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n" +
                "/makeAdmin username - —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" + 
                "/revokeAdmin username - –æ—Ç–æ–∑–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @username –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
        } else {
            replyText =  "‚õîÔ∏è  –°–æ—Ä—Ä–∏, –Ω–æ —Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    public async handleRequestAccess(from: User) {
        let replyText: string = "–î–æ—Å—Ç—É–ø —É–∂–µ –µ—Å—Ç—å"
        
        if (from.hasAccessToBot()) {
            await this.bot.sendMessage(Number(from.getTgId()), replyText)
            return;
        }

        // Get all admins from DB
        if (collections.users) {
            const userService = new UserService(collections.users);
            const adminsData = await userService.findAll({role: UserRole.admin});
            
            const username = from.getData().username;
            const userId = from.getData().tgId;
            const messageForAdmin = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø`;
            const keyboard: InlineKeyboardMarkup = {
                inline_keyboard: [
                    [
                        {text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `${CallbackData.approveAccess}:${userId}`},
                        {text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `${CallbackData.cancelAccess}:${userId}`},
                    ]
                ]
            }
            for (const adminData of adminsData) {
                const admin: User = new User(adminData);
                await this.bot.sendMessage(admin.getTgId(), messageForAdmin, keyboard)
            }

            replyText = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            await this.bot.sendMessage(Number(from.getTgId()), replyText)
        } else {
            throw new Error(`‚õîÔ∏è  Cannot creater new user: Users collection is undefined`);
        }
        
        await this.bot.sendMessage(Number(from.id), replyText)
    }

    public async handleMakeAdmin(from: TelegramBot.User, makeAdminUsername?: string) {
        let replyText: string = ""
        
        if (typeof makeAdminUsername === 'undefined') {
            replyText = "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —é–∑–µ—Ä–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ '@'."
        } else {
            
        }
        
        await this.bot.sendMessage(Number(from.id), replyText)
    }

    public async handleExitAdminMode(from: TelegramBot.User) {
        const user: User = new User({ tgId: from.id });
        let replyText = `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${UserState[await user.getState()]}`

        if (from.getState() === UserState.adminMode) {
            await from.update({ state: UserState.start });
            replyText = `–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ` + replyText; 
        }
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    public async handleState(from: User) {
        const state = from.getState()
        const replyText = `–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${UserState[state]}`
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }

    public async handleStart(from: User) {
        let replyText: string = "Welcome to the Crypto Tarot!"
        
        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
                [
                    replyKeyboardButtons.chooseNeuralNetwork
                ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }
    
        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }
    
    public async handleChooseNeuro(from: User) {
        let replyText: string = "–•–æ—Ä–æ—à–æ. –í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–ª–æ–∂–∏—Ç –∫–∞—Ä—Ç—ã"

        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
            [
                replyKeyboardButtons.useGPT,
                replyKeyboardButtons.useGemini,
            ]
        ]}

        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }

    public async handleSetUseGpt(from: User) {
        from.update({ state: UserState.usingGPT })

        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
            [
                replyKeyboardButtons.endUsingNeuro,
            ]
        ]}

        let replyText: string = "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! GPT —Ä–∞–∑–ª–æ–∂–∏—Ç –∫–∞—Ä—Ç—ã –±–µ–∑ –æ–±–º–∞–Ω–∞ –∏ —Å–º—Å. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ GPT –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç üôåüèª"
        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }

    public async handleSetUseGemini(from: User) {
        // usersState.updateUserState(userId, UserState.usingGemini)

        // const keyboard: ReplyKeyboardMarkup = {
        //     keyboard: [
        //     [
        //         replyKeyboardButtons.endUsingNeuro,
        //     ]
        // ]}

        let replyText: string = `‚ö†Ô∏è –¢–∞—Ä–æ–ª–æ–≥ Gemini –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏—Ö —É—Å–ª—É–≥ ‚ö†Ô∏è`
        await this.bot.sendMessage(Number(from.getTgId()), replyText, /* keyboard */)
    }

    public async handleEndUsingNeuro(from: User) {
        from.update({ state: UserState.start})
        let replyText: string = "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ. –£–±–∏—Ä–∞—é –∫–∞—Ä—Ç—ã üÉèüÉèüÉè"
        const keyboard: ReplyKeyboardMarkup = {
            keyboard: [
                [
                    replyKeyboardButtons.chooseNeuralNetwork
                ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }
        await this.bot.sendMessage(Number(from.getTgId()), replyText, keyboard)
    }
    
    public async handleUnknownCommand(from: User) {
        let replyText: string = "–ü—Ä–æ—Å—Ç–∏, —á–µ–ª–æ–≤–µ–∫, –Ω–æ –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ"
        await this.bot.sendMessage(Number(from.getTgId()), replyText)
    }
}